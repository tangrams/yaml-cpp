// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yaml.proto

#ifndef PROTOBUF_INCLUDED_yaml_2eproto
#define PROTOBUF_INCLUDED_yaml_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_yaml_2eproto 

namespace protobuf_yaml_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_yaml_2eproto
namespace YAML {
namespace proto {
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Map_Entry;
class Map_EntryDefaultTypeInternal;
extern Map_EntryDefaultTypeInternal _Map_Entry_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Sequence;
class SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace proto
}  // namespace YAML
namespace google {
namespace protobuf {
template<> ::YAML::proto::Map* Arena::CreateMaybeMessage<::YAML::proto::Map>(Arena*);
template<> ::YAML::proto::Map_Entry* Arena::CreateMaybeMessage<::YAML::proto::Map_Entry>(Arena*);
template<> ::YAML::proto::Node* Arena::CreateMaybeMessage<::YAML::proto::Node>(Arena*);
template<> ::YAML::proto::Sequence* Arena::CreateMaybeMessage<::YAML::proto::Sequence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace YAML {
namespace proto {

// ===================================================================

class Map_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YAML.proto.Map.Entry) */ {
 public:
  Map_Entry();
  virtual ~Map_Entry();

  Map_Entry(const Map_Entry& from);

  inline Map_Entry& operator=(const Map_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map_Entry(Map_Entry&& from) noexcept
    : Map_Entry() {
    *this = ::std::move(from);
  }

  inline Map_Entry& operator=(Map_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map_Entry* internal_default_instance() {
    return reinterpret_cast<const Map_Entry*>(
               &_Map_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Map_Entry* other);
  friend void swap(Map_Entry& a, Map_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map_Entry* New() const final {
    return CreateMaybeMessage<Map_Entry>(NULL);
  }

  Map_Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map_Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map_Entry& from);
  void MergeFrom(const Map_Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required .YAML.proto.Node val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  private:
  const ::YAML::proto::Node& _internal_val() const;
  public:
  const ::YAML::proto::Node& val() const;
  ::YAML::proto::Node* release_val();
  ::YAML::proto::Node* mutable_val();
  void set_allocated_val(::YAML::proto::Node* val);

  // @@protoc_insertion_point(class_scope:YAML.proto.Map.Entry)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::YAML::proto::Node* val_;
  friend struct ::protobuf_yaml_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YAML.proto.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Map* other);
  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(NULL);
  }

  Map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Map_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .YAML.proto.Map.Entry entry = 2;
  int entry_size() const;
  void clear_entry();
  static const int kEntryFieldNumber = 2;
  ::YAML::proto::Map_Entry* mutable_entry(int index);
  ::google::protobuf::RepeatedPtrField< ::YAML::proto::Map_Entry >*
      mutable_entry();
  const ::YAML::proto::Map_Entry& entry(int index) const;
  ::YAML::proto::Map_Entry* add_entry();
  const ::google::protobuf::RepeatedPtrField< ::YAML::proto::Map_Entry >&
      entry() const;

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YAML.proto.Map)
 private:
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::YAML::proto::Map_Entry > entry_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_yaml_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YAML.proto.Sequence) */ {
 public:
  Sequence();
  virtual ~Sequence();

  Sequence(const Sequence& from);

  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sequence(Sequence&& from) noexcept
    : Sequence() {
    *this = ::std::move(from);
  }

  inline Sequence& operator=(Sequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
               &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Sequence* other);
  friend void swap(Sequence& a, Sequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sequence* New() const final {
    return CreateMaybeMessage<Sequence>(NULL);
  }

  Sequence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sequence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sequence& from);
  void MergeFrom(const Sequence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .YAML.proto.Node item = 2;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  ::YAML::proto::Node* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::YAML::proto::Node >*
      mutable_item();
  const ::YAML::proto::Node& item(int index) const;
  ::YAML::proto::Node* add_item();
  const ::google::protobuf::RepeatedPtrField< ::YAML::proto::Node >&
      item() const;

  // required int32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YAML.proto.Sequence)
 private:
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::YAML::proto::Node > item_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_yaml_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YAML.proto.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(NULL);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scalar = 1;
  bool has_scalar() const;
  void clear_scalar();
  static const int kScalarFieldNumber = 1;
  const ::std::string& scalar() const;
  void set_scalar(const ::std::string& value);
  #if LANG_CXX11
  void set_scalar(::std::string&& value);
  #endif
  void set_scalar(const char* value);
  void set_scalar(const char* value, size_t size);
  ::std::string* mutable_scalar();
  ::std::string* release_scalar();
  void set_allocated_scalar(::std::string* scalar);

  // optional .YAML.proto.Sequence sequence = 2;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  private:
  const ::YAML::proto::Sequence& _internal_sequence() const;
  public:
  const ::YAML::proto::Sequence& sequence() const;
  ::YAML::proto::Sequence* release_sequence();
  ::YAML::proto::Sequence* mutable_sequence();
  void set_allocated_sequence(::YAML::proto::Sequence* sequence);

  // optional .YAML.proto.Map map = 3;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 3;
  private:
  const ::YAML::proto::Map& _internal_map() const;
  public:
  const ::YAML::proto::Map& map() const;
  ::YAML::proto::Map* release_map();
  ::YAML::proto::Map* mutable_map();
  void set_allocated_map(::YAML::proto::Map* map);

  // @@protoc_insertion_point(class_scope:YAML.proto.Node)
 private:
  void set_has_scalar();
  void clear_has_scalar();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_map();
  void clear_has_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scalar_;
  ::YAML::proto::Sequence* sequence_;
  ::YAML::proto::Map* map_;
  friend struct ::protobuf_yaml_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Map_Entry

// required string key = 1;
inline bool Map_Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Map_Entry::key() const {
  // @@protoc_insertion_point(field_get:YAML.proto.Map.Entry.key)
  return key_.GetNoArena();
}
inline void Map_Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YAML.proto.Map.Entry.key)
}
#if LANG_CXX11
inline void Map_Entry::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YAML.proto.Map.Entry.key)
}
#endif
inline void Map_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YAML.proto.Map.Entry.key)
}
inline void Map_Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YAML.proto.Map.Entry.key)
}
inline ::std::string* Map_Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:YAML.proto.Map.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Map_Entry::release_key() {
  // @@protoc_insertion_point(field_release:YAML.proto.Map.Entry.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Map_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:YAML.proto.Map.Entry.key)
}

// required .YAML.proto.Node val = 2;
inline bool Map_Entry::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_Entry::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_Entry::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_Entry::clear_val() {
  if (val_ != NULL) val_->Clear();
  clear_has_val();
}
inline const ::YAML::proto::Node& Map_Entry::_internal_val() const {
  return *val_;
}
inline const ::YAML::proto::Node& Map_Entry::val() const {
  const ::YAML::proto::Node* p = val_;
  // @@protoc_insertion_point(field_get:YAML.proto.Map.Entry.val)
  return p != NULL ? *p : *reinterpret_cast<const ::YAML::proto::Node*>(
      &::YAML::proto::_Node_default_instance_);
}
inline ::YAML::proto::Node* Map_Entry::release_val() {
  // @@protoc_insertion_point(field_release:YAML.proto.Map.Entry.val)
  clear_has_val();
  ::YAML::proto::Node* temp = val_;
  val_ = NULL;
  return temp;
}
inline ::YAML::proto::Node* Map_Entry::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    auto* p = CreateMaybeMessage<::YAML::proto::Node>(GetArenaNoVirtual());
    val_ = p;
  }
  // @@protoc_insertion_point(field_mutable:YAML.proto.Map.Entry.val)
  return val_;
}
inline void Map_Entry::set_allocated_val(::YAML::proto::Node* val) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete val_;
  }
  if (val) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      val = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    set_has_val();
  } else {
    clear_has_val();
  }
  val_ = val;
  // @@protoc_insertion_point(field_set_allocated:YAML.proto.Map.Entry.val)
}

// -------------------------------------------------------------------

// Map

// required int32 size = 1;
inline bool Map::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Map::size() const {
  // @@protoc_insertion_point(field_get:YAML.proto.Map.size)
  return size_;
}
inline void Map::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:YAML.proto.Map.size)
}

// repeated .YAML.proto.Map.Entry entry = 2;
inline int Map::entry_size() const {
  return entry_.size();
}
inline void Map::clear_entry() {
  entry_.Clear();
}
inline ::YAML::proto::Map_Entry* Map::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:YAML.proto.Map.entry)
  return entry_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::YAML::proto::Map_Entry >*
Map::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:YAML.proto.Map.entry)
  return &entry_;
}
inline const ::YAML::proto::Map_Entry& Map::entry(int index) const {
  // @@protoc_insertion_point(field_get:YAML.proto.Map.entry)
  return entry_.Get(index);
}
inline ::YAML::proto::Map_Entry* Map::add_entry() {
  // @@protoc_insertion_point(field_add:YAML.proto.Map.entry)
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::YAML::proto::Map_Entry >&
Map::entry() const {
  // @@protoc_insertion_point(field_list:YAML.proto.Map.entry)
  return entry_;
}

// -------------------------------------------------------------------

// Sequence

// required int32 size = 1;
inline bool Sequence::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sequence::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sequence::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sequence::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Sequence::size() const {
  // @@protoc_insertion_point(field_get:YAML.proto.Sequence.size)
  return size_;
}
inline void Sequence::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:YAML.proto.Sequence.size)
}

// repeated .YAML.proto.Node item = 2;
inline int Sequence::item_size() const {
  return item_.size();
}
inline void Sequence::clear_item() {
  item_.Clear();
}
inline ::YAML::proto::Node* Sequence::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:YAML.proto.Sequence.item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::YAML::proto::Node >*
Sequence::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:YAML.proto.Sequence.item)
  return &item_;
}
inline const ::YAML::proto::Node& Sequence::item(int index) const {
  // @@protoc_insertion_point(field_get:YAML.proto.Sequence.item)
  return item_.Get(index);
}
inline ::YAML::proto::Node* Sequence::add_item() {
  // @@protoc_insertion_point(field_add:YAML.proto.Sequence.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::YAML::proto::Node >&
Sequence::item() const {
  // @@protoc_insertion_point(field_list:YAML.proto.Sequence.item)
  return item_;
}

// -------------------------------------------------------------------

// Node

// optional string scalar = 1;
inline bool Node::has_scalar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_scalar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_scalar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_scalar() {
  scalar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scalar();
}
inline const ::std::string& Node::scalar() const {
  // @@protoc_insertion_point(field_get:YAML.proto.Node.scalar)
  return scalar_.GetNoArena();
}
inline void Node::set_scalar(const ::std::string& value) {
  set_has_scalar();
  scalar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YAML.proto.Node.scalar)
}
#if LANG_CXX11
inline void Node::set_scalar(::std::string&& value) {
  set_has_scalar();
  scalar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YAML.proto.Node.scalar)
}
#endif
inline void Node::set_scalar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scalar();
  scalar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YAML.proto.Node.scalar)
}
inline void Node::set_scalar(const char* value, size_t size) {
  set_has_scalar();
  scalar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YAML.proto.Node.scalar)
}
inline ::std::string* Node::mutable_scalar() {
  set_has_scalar();
  // @@protoc_insertion_point(field_mutable:YAML.proto.Node.scalar)
  return scalar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_scalar() {
  // @@protoc_insertion_point(field_release:YAML.proto.Node.scalar)
  if (!has_scalar()) {
    return NULL;
  }
  clear_has_scalar();
  return scalar_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_scalar(::std::string* scalar) {
  if (scalar != NULL) {
    set_has_scalar();
  } else {
    clear_has_scalar();
  }
  scalar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scalar);
  // @@protoc_insertion_point(field_set_allocated:YAML.proto.Node.scalar)
}

// optional .YAML.proto.Sequence sequence = 2;
inline bool Node::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_sequence() {
  if (sequence_ != NULL) sequence_->Clear();
  clear_has_sequence();
}
inline const ::YAML::proto::Sequence& Node::_internal_sequence() const {
  return *sequence_;
}
inline const ::YAML::proto::Sequence& Node::sequence() const {
  const ::YAML::proto::Sequence* p = sequence_;
  // @@protoc_insertion_point(field_get:YAML.proto.Node.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::YAML::proto::Sequence*>(
      &::YAML::proto::_Sequence_default_instance_);
}
inline ::YAML::proto::Sequence* Node::release_sequence() {
  // @@protoc_insertion_point(field_release:YAML.proto.Node.sequence)
  clear_has_sequence();
  ::YAML::proto::Sequence* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::YAML::proto::Sequence* Node::mutable_sequence() {
  set_has_sequence();
  if (sequence_ == NULL) {
    auto* p = CreateMaybeMessage<::YAML::proto::Sequence>(GetArenaNoVirtual());
    sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:YAML.proto.Node.sequence)
  return sequence_;
}
inline void Node::set_allocated_sequence(::YAML::proto::Sequence* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sequence_;
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    set_has_sequence();
  } else {
    clear_has_sequence();
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:YAML.proto.Node.sequence)
}

// optional .YAML.proto.Map map = 3;
inline bool Node::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_map() {
  if (map_ != NULL) map_->Clear();
  clear_has_map();
}
inline const ::YAML::proto::Map& Node::_internal_map() const {
  return *map_;
}
inline const ::YAML::proto::Map& Node::map() const {
  const ::YAML::proto::Map* p = map_;
  // @@protoc_insertion_point(field_get:YAML.proto.Node.map)
  return p != NULL ? *p : *reinterpret_cast<const ::YAML::proto::Map*>(
      &::YAML::proto::_Map_default_instance_);
}
inline ::YAML::proto::Map* Node::release_map() {
  // @@protoc_insertion_point(field_release:YAML.proto.Node.map)
  clear_has_map();
  ::YAML::proto::Map* temp = map_;
  map_ = NULL;
  return temp;
}
inline ::YAML::proto::Map* Node::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    auto* p = CreateMaybeMessage<::YAML::proto::Map>(GetArenaNoVirtual());
    map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:YAML.proto.Node.map)
  return map_;
}
inline void Node::set_allocated_map(::YAML::proto::Map* map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_;
  }
  if (map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
  } else {
    clear_has_map();
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:YAML.proto.Node.map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace YAML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_yaml_2eproto
